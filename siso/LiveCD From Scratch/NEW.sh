#!/bin/bash

#  !!!  DISCLAIMER !!! THIS SCRIPT MUST BE RUN AS A ROOT USER !!!

#----------------------------------------VARIABLES------------------------------------>
work_folder="LIVE_BOOT"
iso_name="debian-custom-script"

file_dir_pdf="/home/student/PDF"                          # stores PDF files
file_dir="/home/student"                                  # stores palemoon.tar.xz
palemoon="palemoon-32.4.0.linux-x86_64-gtk2.tar.xz"

username_live="root"
password_live="student"

disk_partition="/dev/sdb"

splash_syslinux="sample-640-480-bubble.png"
#----------------------------------------PACKAGES------------------------------------->
    # HOST SYSTEM REQUIREMENTS
sudo apt-get install \
    debootstrap \
    squashfs-tools \
    xorriso \
    isolinux \
    syslinux-efi \
    grub-pc-bin \
    grub-efi-amd64-bin \
    grub-efi-ia32-bin \
    mtools \
    dosfstools

        # HOME FOLDER - LIVE CD FROM SCRATCH
mkdir -p "${HOME}/${work_folder}"
sudo debootstrap \
    --arch=amd64 \
    --variant=minbase \
    stable \
    "${HOME}/${work_folder}/chroot" \
    http://ftp.cz.debian.org/debian/


        # LIVE CD SYSTEM REQUIREMENTS (KERNEL, INIT) 
sudo chroot "${HOME}/${work_folder}/chroot" << EOF
apt-get update && \
apt-get install -y --no-install-recommends \
    linux-image-amd64 \
    live-boot \
    systemd-sysv
EOF

sudo chroot "${HOME}/${work_folder}/chroot" << EOF
apt-get install -y --no-install-recommends \
    curl \
    network-manager \
    net-tools \
    xserver-xorg-core \
    xserver-xorg-input-libinput \
    xserver-xorg-video-fbdev \
    libasound2 \
    libdbus-glib-1-2 \
    libgtk2.0-0 \
    ca-certificates \
    console-setup \
    locales \
    cryptsetup \
    cryptsetup-initramfs \
    cryptsetup-run \
    xpdf \
    xinit \
    nano \
    xz-utils
EOF

#----------------------------------------LIVE SYSTEM CUSTOMIZATION----------------------------------------#
    # HOSTNAME
echo "debian-live" | sudo tee "${HOME}/${work_folder}/chroot/etc/hostname"
    
    # PASSWORD
echo -e "$password_live\n$password_live" | sudo chroot "${HOME}/${work_folder}/chroot" passwd "$username_live"
    
    # KEYBOARD 
sudo tee "${HOME}/${work_folder}/chroot/etc/default/keyboard" << EOF
# KEYBOARD CONFIGURATION FILE

# Consult the keyboard(5) manual page.

XKBMODEL="pc105"
XKBLAYOUT="cz"
XKBVARIANT=""
XKBOPTIONS=""

BACKSPACE="guess"
EOF
    # LOCALE
sudo tee "${HOME}/${work_folder}/chroot/etc/default/locale" << EOF
#  File generated by update-locale

LANG="en_US.UTF-8"
LC_NUMERIC="cs_CZ.UTF-8"
LC_TIME="cs_CZ.UTF-8"
LC_MONETARY="cs_CZ.UTF-8"
LC_PAPER="cs_CZ.UTF-8"
LC_NAME="cs_CZ.UTF-8"
LC_ADDRESS="cs_CZ.UTF-8"
LC_TELEPHONE="cs_CZ.UTF-8"
LC_MEASUREMENT="cs_CZ.UTF-8"
LC_IDENTIFICATION="cs_CZ.UTF-8"
EOF

# AUTOLOGIN
	#sed uses regex in search
sudo chroot "${HOME}/${work_folder}/chroot" sed -i 's/^#NAutoVTs=.*/NAutoVTs=1/g' "/etc/systemd/logind.conf"
    #
sudo chroot "${HOME}/${work_folder}/chroot" mkdir -p "/etc/systemd/system/getty@tty1.service.d/"

sudo tee "${HOME}/${work_folder}/chroot/etc/systemd/system/getty@tty1.service.d/autologin.conf" << EOF
[Service]
ExecStart=
ExecStart=-/sbin/agetty -o '-p -f -- \\u' --noclear --autologin root %I $TERM
EOF

echo "CRYPTSETUP=y" | sudo tee -a "${HOME}/${work_folder}/chroot/etc/cryptsetup-initramfs/conf-hook"
        # UPDATE INITRAMFS
sudo chroot "${HOME}/${work_folder}/chroot" update-initramfs -k all -u

# PALEMOON
sudo cp ${file_dir}/${palemoon} ${HOME}/${work_folder}/chroot
sudo chroot "${HOME}/${work_folder}/chroot" tar xvf "/${palemoon}" -C /
sudo chroot "${HOME}/${work_folder}/chroot" ln -s /palemoon/palemoon /usr/bin/palemoon
sudo chroot "${HOME}/${work_folder}/chroot" rm -rf "/${palemoon}"

sudo chroot "${HOME}/${work_folder}/chroot" mkdir -p /root/PDF
sudo cp "${file_dir_pdf}/"OS_* "${HOME}/${work_folder}/chroot/root/PDF/"

mkdir -p "${HOME}/${work_folder}"/{staging/{EFI/BOOT,boot/grub/x86_64-efi,isolinux,live},tmp}

	# COMPRESSION OF THE ALTERED CHROOT ENVIRONMENT
sudo mksquashfs \
    "${HOME}/${work_folder}/chroot" \
    "${HOME}/${work_folder}/staging/live/filesystem.squashfs" \
    -e boot

	# COPPY OF THE KERNEL AND INITRAMFS
sudo cp "${HOME}/${work_folder}/chroot/boot"/vmlinuz-* \
    "${HOME}/${work_folder}/staging/live/vmlinuz" && \
sudo cp "${HOME}/${work_folder}/chroot/boot"/initrd.img-* \
    "${HOME}/${work_folder}/staging/live/initrd"

# BOOTLOADERS 
        # ISOLINUX (SYSLINUX)
sudo tee "${HOME}/${work_folder}/staging/isolinux/isolinux.cfg" << EOF
UI vesamenu.c32

MENU TITLE 
MENU BACKGROUND splash.png

DEFAULT linux
#TIMEOUT 60

#MENU RESOLUTION 640 480
MENU COLOR border        30;44   #40ffffff #a0000000 std

MENU COLOR title         1;36;44 #9033ccff #a0000000 std
MENU COLOR sel           7;37;40 #e0ffffff #20ffffff all
MENU COLOR unsel         37;44   #50ffffff #a0000000 std

MENU COLOR help          37;40   #c0ffffff #a0000000 std
#MENU COLOR timeout_msg  37;40   #80ffffff #00000000 std

#MENU COLOR timeout      1;37;40 #c0ffffff #00000000 std
#MENU COLOR msg07        37;40   #90ffffff #a0000000 std
#MENU COLOR tabmsg       31;40   #30ffffff #00000000 std

MENU VSHIFT 12
MENU HSHIFT 25
MENU WIDTH 45

LABEL linux
  MENU LABEL Debian Live

  MENU DEFAULT
  KERNEL /live/vmlinuz
  APPEND initrd=/live/initrd boot=live persistence persistence-encryption=luks
EOF

	### isolinux SPLASH IMG
sudo cp ${file_dir}/${splash_syslinux} ${HOME}/${work_folder}/staging/isolinux/splash.png

# BOOTLOADERS
	    # GRUB (efi/uefi mode)
sudo tee "${HOME}/${work_folder}/staging/boot/grub/grub.cfg" << EOF
insmod part_gpt
insmod part_msdos
insmod fat
insmod iso9660

insmod all_video
insmod font

set default="0"
set timeout=30

###TODO - problematic part :(
#insmod png
#insmod gfxterm
#set gfxmode=auto
#terminal_output=gfxterm
#background_image ($root)/boot/grub/splash.png

# If X has issues finding screens, experiment with/without nomodeset.

menuentry "Debian Live [EFI/GRUB]" {
    search --no-floppy --set=root --label DEBLIVE
    linux ($root)/live/vmlinuz boot=live persistence persistence-encryption=luks
    initrd ($root)/live/initrd
}

EOF

    ### GRUB splash IMG - problematic part :(
sudo cp ${file_dir}/${splash_syslinux} ${HOME}/${work_folder}/staging/boot/grub/splash.png

# COPY CONFIG INTO EFI BOOT DIRECTORY
sudo cp "${HOME}/${work_folder}/staging/boot/grub/grub.cfg" "${HOME}/${work_folder}/staging/EFI/BOOT/"

	# CONFIG WHICH FINDS ROOT AND LOADS THE GRUB CONFIG
sudo tee "${HOME}/${work_folder}/tmp/grub-embed.cfg" << EOF
if ! [ -d "$cmdpath" ]; then
    # On some firmware, GRUB has a wrong cmdpath when booted from an optical disc.

    # https://gitlab.archlinux.org/archlinux/archiso/-/issues/183
    if regexp --set=1:isodevice '^(\([^)]+\))\/?[Ee][Ff][Ii]\/[Bb][Oo][Oo][Tt]\/?$' "$cmdpath"; then
        cmdpath="${isodevice}/EFI/BOOT"
    fi
fi
configfile "${cmdpath}/grub.cfg"
EOF

	# PREPARE BOOT LOADER FILES	(bios/legacy)
sudo cp /usr/lib/ISOLINUX/isolinux.bin "${HOME}/${work_folder}/staging/isolinux/" && \
sudo cp /usr/lib/syslinux/modules/bios/* "${HOME}/${work_folder}/staging/isolinux/"


	# (efi/modern)
sudo cp -r /usr/lib/grub/x86_64-efi/* "${HOME}/${work_folder}/staging/boot/grub/x86_64-efi/"

# EFI bootable from grub x32
grub-mkstandalone -O i386-efi \
    --modules="part_gpt part_msdos fat iso9660" \
    --locales="" \
    --themes="" \
    --fonts="" \
    --output="${HOME}/${work_folder}/staging/EFI/BOOT/BOOTIA32.EFI" \
    "boot/grub/grub.cfg=${HOME}/${work_folder}/tmp/grub-embed.cfg"

	# EFI bootable from grub x64
grub-mkstandalone -O x86_64-efi \
    --modules="part_gpt part_msdos fat iso9660" \
    --locales="" \
    --themes="" \
    --fonts="" \
    --output="${HOME}/${work_folder}/staging/EFI/BOOT/BOOTx64.EFI" \
    "boot/grub/grub.cfg=${HOME}/${work_folder}/tmp/grub-embed.cfg"

	# FAT16 UEFI containing EFI
(cd "${HOME}/${work_folder}/staging" && \
    dd if=/dev/zero of=efiboot.img bs=1M count=20 && \
    mkfs.vfat efiboot.img && \
    mmd -i efiboot.img ::/EFI ::/EFI/BOOT && \
    mcopy -vi efiboot.img \
        "${HOME}/${work_folder}/staging/EFI/BOOT/BOOTIA32.EFI" \
        "${HOME}/${work_folder}/staging/EFI/BOOT/BOOTx64.EFI" \
        "${HOME}/${work_folder}/staging/boot/grub/grub.cfg" \
        ::/EFI/BOOT/
)

	# CREATE A BOOTABLE ISO
xorriso \
    -as mkisofs \
    -iso-level 3 \
    -o "${HOME}/${work_folder}/${iso_name}.iso" \
    -full-iso9660-filenames \
    -volid "DEBLIVE" \
    --mbr-force-bootable -partition_offset 16 \
    -joliet -joliet-long -rational-rock \
    -isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
    -eltorito-boot \
        isolinux/isolinux.bin \
        -no-emul-boot \
        -boot-load-size 4 \
        -boot-info-table \
        --eltorito-catalog isolinux/isolinux.cat \
    -eltorito-alt-boot \
        -e --interval:appended_partition_2:all:: \
        -no-emul-boot \
        -isohybrid-gpt-basdat \
    -append_partition 2 C12A7328-F81F-11D2-BA4B-00A0C93EC93B ${HOME}/${work_folder}/staging/efiboot.img \
    "${HOME}/${work_folder}/staging"

###TODO
#----------------------------------------ENCRYPTED PERSISTENCE----------------------------------------#

##delete all partition on USB disk [d - d - d - w]
#fdisk /dev/sdc 

#dd bs=7M if=/root/v20/debian-live-image-amd64.hybrid.iso of=/dev/sdc oflag=sync

##create sdc3 partition [n - p - 3 - w]
#fdisk -w never /dev/sdc

##encryption set up [YES - storage - storage]
#cryptsetup --verify-passphrase luksFormat /dev/sdc3
#cryptsetup luksOpen /dev/sdc3 liveMount
##dd bs=7M if=/dev/zero of=/dev/mapper/liveMount
#mkfs.ext4 -L persistence /dev/mapper/liveMount

#mkdir /mnt/persistence
#mount /dev/mapper/liveMount /mnt/persistence
#echo "/home" > /mnt/sdc3/persistence.conf
#umount /mnt/persistence

#cryptsetup luksClose liveMount




#---SCRIPT AUTOMATION
#     # DELETE ALL EXISTING PARTITIONS
#echo -e "o\nw" | fdisk "${DISKPARTITIN}" > /dev/null 2>&1

    # CREATE NEW PRIMARY PARTITION NUMBER 3
#echo -e "n\np\n3\n\n\nw" | fdisk -w never "${DISKPARTITIN}" > /dev/null 2>&1

